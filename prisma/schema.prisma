generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id                  Int                   @id @default(autoincrement())
  nom                 String
  prenom              String
  email               String                @unique
  motDePasse          String
  role                RoleUtilisateur
  adresse             String?
  dernierAcces        DateTime?
  photoProfil         String?
  telephone           String?
  commentairesRediges Commentaire[]
  demandes            DemandeProprietaire[]
  medias              Media[]
  messagesRecus       Message[]             @relation("MessagesRecus")
  messagesEnvoyes     Message[]             @relation("MessagesEnvoyes")
  proprietaire        Proprietaire?
  reservations        Reservation[]
}

model Proprietaire {
  id            Int         @id @default(autoincrement())
  utilisateurId Int         @unique
  contact       String?
  bateaux       Bateau[]
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])
}

model Bateau {
  id                 Int            @id @default(autoincrement())
  nom                String
  modele             String
  prix               Decimal
  description        String?
  proprietaireId     Int?
  creeLe             DateTime       @default(now())
  slug               String         @unique @default("sailingloc-slug")
  portdefault        String?
  datesIndisponibles String?
  typeBateau         String?
  assurances         Assurance[]
  proprietaire       Proprietaire?  @relation(fields: [proprietaireId], references: [id])
  commentaires       Commentaire[]
  details            DetailsBateau?
  medias             Media[]
  messages           Message[]
  reservations       Reservation[]
}

model DetailsBateau {
  id                    Int      @id @default(autoincrement())
  longueur              Float?
  largeur               Float?
  tirantEau             Float?
  capaciteMax           Int?
  nombreCabines         Int?
  nombreCouchages       Int?
  equipements           String?
  optionsPayantes       String?
  zonesNavigation       String?
  politiqueAnnulation   String?
  locationSansPermis    Boolean?
  numeroPoliceAssurance String?
  certificatNavigation  String?
  bateauId              Int      @unique
  anneeConstruction     String?
  portArriver           String?
  portDeplacement       String?
  tarifications         String?
  portdarriver          String?
  portdedepart          String?
  depotgarantie         String?
  dureeLocation         String?
  bateau                Bateau   @relation(fields: [bateauId], references: [id])
}

model Reservation {
  id                 Int               @id @default(autoincrement())
  utilisateurId      Int
  bateauId           Int
  dateDebut          DateTime
  dateFin            DateTime
  statut             StatutReservation
  creeLe             DateTime          @default(now())
  contratId          Int?              @unique
  urlDocumentContrat String?
  commentaires       Commentaire[]
  contrat            Contrat?          @relation("ContratToReservation")
  messages           Message[]
  paiement           Paiement?
  bateau             Bateau            @relation(fields: [bateauId], references: [id])
  utilisateur        Utilisateur       @relation(fields: [utilisateurId], references: [id])
}

model Paiement {
  id                Int          @id @default(autoincrement())
  reservationId     Int          @unique
  montant           Decimal
  creeLe            DateTime     @default(now())
  etatPaiement      EtatPaiement
  montantTotal      Decimal
  pourcentageStripe Decimal
  methodePaiement   String
  reservation       Reservation  @relation(fields: [reservationId], references: [id])
  recu              Recu?
}

model Recu {
  id         Int      @id @default(autoincrement())
  paiementId Int      @unique
  creeLe     DateTime @default(now())
  media      Media?
  paiement   Paiement @relation(fields: [paiementId], references: [id])
}

model Contrat {
  id            Int         @id @default(autoincrement())
  reservationId Int         @unique
  creeLe        DateTime    @default(now())
  signature     Boolean
  reservation   Reservation @relation("ContratToReservation", fields: [reservationId], references: [id])
  medias        Media[]
}

model Assurance {
  id                  Int           @id @default(autoincrement())
  nom                 String
  description         String
  montant             Decimal
  bateauId            Int
  creeLe              DateTime      @default(now())
  couvertureAssurance TypeAssurance
  bateau              Bateau        @relation(fields: [bateauId], references: [id])
  medias              Media[]
}

model Message {
  id             Int          @id @default(autoincrement())
  expediteurId   Int
  destinataireId Int
  reservationId  Int?
  bateauId       Int?
  contenu        String
  dateEnvoi      DateTime
  creeLe         DateTime     @default(now())
  lu             Boolean      @default(false)
  bateau         Bateau?      @relation(fields: [bateauId], references: [id])
  destinataire   Utilisateur  @relation("MessagesRecus", fields: [destinataireId], references: [id])
  expediteur     Utilisateur  @relation("MessagesEnvoyes", fields: [expediteurId], references: [id])
  reservation    Reservation? @relation(fields: [reservationId], references: [id])
}

model Commentaire {
  id            Int          @id @default(autoincrement())
  contenu       String
  note          Int
  creeLe        DateTime     @default(now())
  auteurId      Int
  bateauId      Int?
  reservationId Int?
  auteur        Utilisateur  @relation(fields: [auteurId], references: [id])
  bateau        Bateau?      @relation(fields: [bateauId], references: [id])
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
}

model DemandeProprietaire {
  id             Int           @id @default(autoincrement())
  utilisateurId  Int
  statut         StatutDemande
  dateDemande    DateTime
  dateTraitement DateTime?
  data           String
  utilisateur    Utilisateur   @relation(fields: [utilisateurId], references: [id])
  medias         Media[]
}

model Media {
  id                    Int                  @id @default(autoincrement())
  url                   String
  type                  TypeMedia
  titre                 String?
  description           String?
  creeLe                DateTime             @default(now())
  utilisateurId         Int?
  bateauId              Int?
  assuranceId           Int?
  contratId             Int?
  demandeProprietaireId Int?
  recuId                Int?                 @unique
  numeroPolice          String?
  assurance             Assurance?           @relation(fields: [assuranceId], references: [id])
  bateau                Bateau?              @relation(fields: [bateauId], references: [id])
  contrat               Contrat?             @relation(fields: [contratId], references: [id])
  demandeProprietaire   DemandeProprietaire? @relation(fields: [demandeProprietaireId], references: [id])
  recu                  Recu?                @relation(fields: [recuId], references: [id])
  utilisateur           Utilisateur?         @relation(fields: [utilisateurId], references: [id])
}

enum RoleUtilisateur {
  CLIENT
  PROPRIETAIRE
  ADMIN
}

enum StatutReservation {
  EN_ATTENTE
  CONFIRMEE
  ANNULEE
}

enum MethodePaiement {
  CARTE
  VIREMENT
  PAYPAL
}

enum TypeAssurance {
  RESPONSABILITE_CIVILE
  TOUS_RISQUES
}

enum StatutDemande {
  EN_ATTENTE
  ACCEPTEE
  REFUSEE
}

enum TypeMedia {
  COVER
  GALLERIE
  ATTESTATION_ASSURANCE
  CERTIFICAT_NAVIGATION
  PROFIL
}

enum EtatPaiement {
  PAYE
  EN_ATTENTE
  ECHEC
}
