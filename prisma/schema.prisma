generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id           Int             @id @default(autoincrement())
  nom          String
  prenom       String
  email        String          @unique
  motDePasse   String
  role         RoleUtilisateur
  telephone    String?
  adresse      String?
  dernierAcces DateTime?
  photoProfil  String?

  proprietaire        Proprietaire?
  reservations        Reservation[]
  messagesEnvoyes     Message[]             @relation("MessagesEnvoyes")
  messagesRecus       Message[]             @relation("MessagesRecus")
  demandes            DemandeProprietaire[]
  medias              Media[]
  commentairesRediges Commentaire[]
}

model Proprietaire {
  id            Int         @id @default(autoincrement())
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])
  utilisateurId Int         @unique
  contact       String?

  bateaux Bateau[]
}

model Bateau {
  id                 Int           @id @default(autoincrement())
  nom                String
  slug               String        @unique @default(dbgenerated("gen_random_uuid()"))
  modele             String
  portdefault        String?
  description        String?
  typeBateau         String?
  datesIndisponibles String?
  proprietaire       Proprietaire? @relation(fields: [proprietaireId], references: [id])
  proprietaireId     Int?
  creeLe             DateTime      @default(now())

  reservations Reservation[]
  assurances   Assurance[]
  messages     Message[]
  medias       Media[]
  details      DetailsBateau?
  commentaires Commentaire[]
}

model DetailsBateau {
  id                                   Int      @id @default(autoincrement())
  longueur                             Float?
  largeur                              Float?
  tirantEau                            Float?
  capaciteMax                          Int?
  nombreCabines                        Int?
  nombreCouchages                      Int?
  equipements                          String?
  optionsPayantes                      String?
  zonesNavigation                      String?
  depotgarantie                        String?
  PassagersInclusDansLePrix            String?
  SupplementParPassagerSupplémentaire String?
  moteur                               String?
  reservoirEau                         String?
  reservoirCarburant                   String?
  dureeLocation                        String?
  politiqueAnnulation                  String?
  locationSansPermis                   Boolean?
  numeroPoliceAssurance                String?
  certificatNavigation                 String?
  anneeConstruction                    String?
  tarifications                        String?
  portdedepart                         String?
  portdarriver                         String?

  bateau   Bateau @relation(fields: [bateauId], references: [id])
  bateauId Int    @unique
}

model Reservation {
  id                      Int               @id @default(autoincrement())
  utilisateur             Utilisateur       @relation(fields: [utilisateurId], references: [id])
  utilisateurId           Int
  bateau                  Bateau            @relation(fields: [bateauId], references: [id])
  bateauId                Int
  dateDebut               DateTime
  dateFin                 DateTime
  plage                   String?
  numbreDePassage         String?
  supplement              String?
  prixDeBase              Decimal?
  prixSupplementPassagers Decimal?
  prixOptionsPayantes     Decimal?
  Total                   Decimal?
  heure                   String?
  statut                  StatutReservation
  data                    String?
  creeLe                  DateTime          @default(now())
  urlDocumentContrat      String?
  urlRecu                 String?

  paiement     Paiement?
  contrat      Contrat?      @relation(name: "ContratToReservation")
  contratId    Int?          @unique
  messages     Message[]
  commentaires Commentaire[]
}

model Paiement {
  id                Int          @id @default(autoincrement())
  reservation       Reservation  @relation(fields: [reservationId], references: [id])
  reservationId     Int          @unique
  montant           Decimal
  montantTotal      Decimal
  methodePaiement   String
  pourcentageStripe Decimal
  etatPaiement      EtatPaiement
  creeLe            DateTime     @default(now())
  recu              Recu?
}

model Recu {
  id         Int      @id @default(autoincrement())
  paiement   Paiement @relation(fields: [paiementId], references: [id])
  paiementId Int      @unique

  creeLe DateTime @default(now())

  media Media?
}

model Contrat {
  id            Int         @id @default(autoincrement())
  reservation   Reservation @relation(name: "ContratToReservation", fields: [reservationId], references: [id])
  reservationId Int         @unique
  signature     Boolean
  creeLe        DateTime    @default(now())

  medias Media[]
}

model Assurance {
  id                  Int           @id @default(autoincrement())
  nom                 String
  description         String
  montant             Decimal
  couvertureAssurance TypeAssurance
  bateau              Bateau        @relation(fields: [bateauId], references: [id])
  bateauId            Int
  creeLe              DateTime      @default(now())

  medias Media[]
}

model Message {
  id             Int          @id @default(autoincrement())
  expediteur     Utilisateur  @relation("MessagesEnvoyes", fields: [expediteurId], references: [id])
  expediteurId   Int
  destinataire   Utilisateur? @relation("MessagesRecus", fields: [destinataireId], references: [id])
  destinataireId Int?
  reservation    Reservation? @relation(fields: [reservationId], references: [id])
  reservationId  Int?
  bateau         Bateau?      @relation(fields: [bateauId], references: [id])
  bateauId       Int?
  contenu        String
  object         String?
  dateEnvoi      DateTime
  lu             Boolean      @default(false)
  creeLe         DateTime     @default(now())
}

model Commentaire {
  id      Int      @id @default(autoincrement())
  contenu String
  note    Int // 1 à 5
  creeLe  DateTime @default(now())

  auteur   Utilisateur @relation(fields: [auteurId], references: [id])
  auteurId Int

  bateau   Bateau? @relation(fields: [bateauId], references: [id])
  bateauId Int?

  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  reservationId Int?
}

model DemandeProprietaire {
  id             Int           @id @default(autoincrement())
  utilisateur    Utilisateur   @relation(fields: [utilisateurId], references: [id])
  utilisateurId  Int
  statut         StatutDemande
  data           String
  dateDemande    DateTime
  dateTraitement DateTime?

  medias Media[]
}

model Media {
  id           Int       @id @default(autoincrement())
  url          String
  type         TypeMedia
  titre        String?
  description  String?
  numeroPolice String?
  creeLe       DateTime  @default(now())

  utilisateur   Utilisateur? @relation(fields: [utilisateurId], references: [id])
  utilisateurId Int?

  bateau   Bateau? @relation(fields: [bateauId], references: [id])
  bateauId Int?

  assurance   Assurance? @relation(fields: [assuranceId], references: [id])
  assuranceId Int?

  contrat   Contrat? @relation(fields: [contratId], references: [id])
  contratId Int?

  demandeProprietaire   DemandeProprietaire? @relation(fields: [demandeProprietaireId], references: [id])
  demandeProprietaireId Int?

  recu   Recu? @relation(fields: [recuId], references: [id])
  recuId Int?  @unique
}

enum RoleUtilisateur {
  CLIENT
  PROPRIETAIRE
  ADMIN
}

enum StatutReservation {
  EN_ATTENTE
  CONFIRMEE
  ANNULEE
}

enum MethodePaiement {
  CARTE
  APPLE_PAY
  PAYPAL
}

enum TypeAssurance {
  RESPONSABILITE_CIVILE
  TOUS_RISQUES
}

enum StatutDemande {
  EN_ATTENTE
  ACCEPTEE
  REFUSEE
}

enum TypeMedia {
  COVER
  GALLERIE
  ATTESTATION_ASSURANCE
  CERTIFICAT_NAVIGATION
  PROFIL
  CONTRAT
  RECUS
}

enum EtatPaiement {
  PAYE
  EN_ATTENTE
  ECHEC
}
